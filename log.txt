nt:_O.--  nt:_O.--   nt:_O.--   nt:_O.--   nt:_O.--  nt:_O.--   nt:_O.--   nt:_O.--   nt:_O.--   nt:_O.--   nt:_O.--   nt:_O.--   nt:_O.--   nt:_O.--   nt:_O.--   nt:_O.--
nt:_O.--  nt:_O.--   nt:_O.--   nt:_O.--   t :_i.C5  nt:_O.--   nt:_O.--   nt:_O.--   nt:_O.--   nt:_O.--   nt:_O.--   nt:_O.--   nt:_O.--   nt:_O.--   nt:_O.--   nt:_O.--
nt:_O.--  nt:_O.--   nt:_O.--   nt:_O.--   t :fk.pl  nt:_O.--   nt:_O.--   nt:_O.--   nt:_O.--   nt:_O.--   nt:_O.--   nt:_O.--   nt:_O.--   nt:_O.--   nt:_O.--   nt:_O.--

4          4          1          1          FF         6          4          4          6          8          8          9          6          C          C          D
==============================================================================================================================================================================
0          1          2          3          4          5          6          7          8          9          A          B          C          D          E          F          
==============================================================================================================================================================================

FF:_W.46   FF:_W.4A   pW:_W.50   pW:_W.55   6 :rF._T   pW:_W.61   FF:_W.67   FF:_W.6B   pW:_W.6E   pW:_W.d-   pW:_W.d-   pW:_W.d-   pW:_W.d-   pW:_W.d-   pW:_W.d-   pW:_W.d-
FF:WF.d-   FF:WF.d-   pF:WF.d-   pF:WF.d-   nt:gI.fb   pF:WF.d-   FF:WF.d-   FF:WF.d-   pF:_W.d-   pW:_W.d-   pW:_W.d-   pW:_W.d-   pF:FO.d-   pW:_W.d-   pW:_W.d-   pW:_W.d-
d0:WF.d-   pI:WF.d-   pF:WF.d-   pF:WF.d-   nt:_I.d-   pF:WF.d-   pI:WF.d-   pI:WF.d-   pF:WF.d-   pF:WF.d-   pF:WF.d-   pF:WF.d-   pF:FO.sF   pW:_W.d-   pW:_W.d-   pW:_W.d-
pI:_I.rb   pI:WF.d-   pF:WF.d-   pF:WF.d-   nt:_I.d-   pF:WF.d-   pI:WF.d-   pI:WF.d-   pF:WF.d-   pF:WF.d-   pF:WF.d-   pF:WF.d-   pF:FO.sF   d0:_W.d-   pW:_W.d-   pW:_W.d-
pI:_I.d-   pI:gI.fb   FF:WF.d-   FF:WF.d-   nt:_I.d-   pF:WF.d-   pI:WF.d-   pI:WF.d-   pF:WF.d-   pF:WF.d-   pF:WF.d-   pF:WF.d-   pF:FO.sF   pW:FO.sF   pW:_W.d-   pW:_W.d-
pI:_I.d-   pI:_I.d-   pI:WF.d-   pI:WF.d-   nt:_I.d-   pF:WF.d-   pI:WF.d-   pI:WF.d-   pF:WF.d-   pF:WF.d-   pF:WF.d-   pF:WF.d-   pF:FO.sF   pW:FO.sF   pW:FO.sF   pW:_W.d-
pI:_I.d-   pI:_I.d-   d0:WF.d-   pI:WF.d-   nt:_I.d-   pF:WF.d-   pI:WF.d-   pI:WF.d-   pF:WF.d-   pF:WF.d-   pF:WF.d-   pF:WF.d-   pF:FO.sF   pW:FO.sF   pW:FO.sF   pW:FO.d-
pI:_I.d-   pI:_I.d-   pI:_I.rb   pI:WF.d-   nt:_I.d-   pF:WF.d-   pI:WF.d-   pI:WF.d-   pF:WF.d-   pF:WF.d-   pF:WF.d-   pF:WF.d-   pF:FO.sF   pW:FO.sF   pW:FO.sF   pW:FO.sF
pI:_I.d-   pI:_I.d-   pI:_I.d-   pI:_F.d-   nt:_I.d-   pF:WF.d-   pI:WF.d-   pI:WF.d-   pF:WF.d-   pF:WF.d-   pF:WF.d-   pF:WF.d-   pF:FO.sF   pW:FO.sF   pW:FO.sF   pW:FO.sF
pI:_I.d-   pI:_I.d-   pI:_I.d-   pI:_I.d-   nt:_I.d-   pF:WF.d-   pI:WF.d-   pI:WF.d-   pF:WF.d-   pF:WF.d-   pF:WF.d-   pF:WF.d-   pF:FO.sF   pW:FO.sF   pW:FO.sF   pW:FO.sF
pI:_I.d-   pI:_I.d-   pI:_I.d-   pI:_I.d-   nt:_I.d-   pF:WF.d-   pI:WF.d-   pI:WF.d-   pF:WF.d-   pF:WF.d-   pF:WF.d-   pF:WF.d-   pF:FO.sF   pW:FO.sF   pW:FO.sF   pW:FO.sF

4          4          1          1          FF         6          4          4          6          8          8          9          6          C          C          D
==============================================================================================================================================================================
0          1          2          3          4          5          6          7          8          9          A          B          C          D          E          F          
==============================================================================================================================================================================

pI:_I.d-   pI:_I.d-   pI:_I.d-   pI:_I.d-   nt:_I.d-   pF:WF.d-   pI:WF.d-   pI:WF.d-   pF:WF.d-   pF:WF.d-   pF:WF.d-   pF:WF.d-   pF:FO.sF   pW:FO.sF   pW:FO.sF   pW:FO.sF
pI:_I.d-   pI:_I.d-   pI:_I.d-   pI:_I.d-   nt:_I.d-   pF:_F.d-   pI:WF.d-   pI:WF.d-   pF:WF.d-   pF:WF.d-   pF:WF.d-   pF:WF.d-   pF:FO.sF   pW:FO.sF   pW:FO.sF   pW:FO.sF
pI:_I.d-   pI:_I.d-   pI:_I.d-   pI:_I.d-   nt:_I.d-   pF:_I.d-   pI:WF.d-   pI:WF.d-   pF:WF.d-   pF:WF.d-   pF:WF.d-   pF:WF.d-   pF:FO.sF   pW:FO.sF   pW:FO.sF   pW:FO.sF
pI:_I.d-   pI:_I.d-   pI:_I.d-   pI:_I.d-   nt:_I.d-   pF:_I.d-   d0:WF.d-   pI:WF.d-   pF:WF.d-   pF:WF.d-   pF:WF.d-   pF:WF.d-   pF:FO.sF   pW:FO.sF   pW:FO.sF   pW:FO.sF
pI:_I.d-   pI:_I.d-   pI:_I.d-   pI:_I.d-   nt:_I.d-   FF:_I.d-   pI:gI.fb   pI:WF.d-   FF:WF.d-   pF:WF.d-   pF:WF.d-   pF:WF.d-   FF:FO.sF   pW:FO.sF   pW:FO.sF   pW:FO.sF
pI:_I.d-   pI:_I.d-   pI:_I.d-   pI:_I.d-   nt:_I.d-   pI:_I.d-   pI:_I.d-   pI:_F.d-   pI:WF.d-   pF:WF.d-   pF:WF.d-   pF:WF.d-   nt:_I.d-   nt:_I.rb   nt:_I.rb   nt:gI.lT
pI:_I.d-   pI:_I.d-   pI:_I.d-   pI:_I.d-   nt:_I.d-   pI:_I.d-   pI:_I.d-   pI:_I.d-   pI:gI.fb   FF:WF.d-   FF:WF.d-   pF:WF.d-   nt:_I.d-   nt:_I.d-   nt:_I.d-   nt:_I.d-
pI:_I.d-   pI:_I.d-   pI:_I.d-   pI:_I.d-   nt:_I.d-   pI:_I.d-   pI:_I.d-   pI:_I.d-   pI:_I.d-   pI:WF.d-   pI:WF.d-   pF:WF.d-   nt:_I.d-   nt:_I.d-   nt:_I.d-   nt:_I.d-
pI:_I.d-   pI:_I.d-   pI:_I.d-   pI:_I.d-   nt:_I.d-   pI:_I.d-   pI:_I.d-   pI:_I.d-   pI:_I.d-   pI:gI.fb   pI:WF.d-   FF:WF.d-   nt:_I.d-   nt:_I.d-   nt:_I.d-   nt:_I.d-
pI:_I.d-   pI:_I.d-   pI:_I.d-   pI:_I.d-   nt:_I.d-   pI:_I.d-   pI:_I.d-   pI:_I.d-   pI:_I.d-   pI:_I.d-   pI:_F.d-   pI:WF.d-   nt:_I.d-   nt:_I.d-   nt:_I.d-   nt:_I.d-
pI:_I.d-   pI:_I.d-   pI:_I.d-   pI:_I.d-   nt:_I.d-   pI:_I.d-   pI:_I.d-   pI:_I.d-   pI:_I.d-   pI:_I.d-   pI:_I.d-   pI:WF.d-   nt:_I.d-   nt:_I.d-   nt:_I.d-   nt:_I.d-
pI:_I.d-   pI:_I.d-   pI:_I.d-   pI:_I.d-   nt:_I.d-   pI:_I.d-   pI:_I.d-   pI:_I.d-   pI:_I.d-   pI:_I.d-   pI:_I.d-   d0:WF.d-   nt:_I.d-   nt:_I.d-   nt:_I.d-   nt:_I.d-


    1. why PULSE output for idx 4 l3?                   
    2. why START FLICKER output for idx C, D, E, F?
    3. why FOLLOW state for idx C, D, E, F?
    4. why not SET_DELAY for idx 9 to F?
    
    1 might be due to change from FALLING_EDGE to NOT_TOUCHED in FLICKER, look at input priority.
    2, 3, 4 are likely related. 
    Suspect delay is too high for SET_DELAY and is carrying over to change output. That could explain 2 and 4. On reflection, it's probably not that but should check anyway.
    Delay is being set in index order rather than height in tree order, which is wrong. 
    Also delay overflows at C index.
    SET_DELAY = 0x40 | six bits for length of delay. Length of delay looks like it overflows and flips the SET_DELAY bit at index C.
    Explains why delay is shorter from C upwards which would also explain why the higher indices go to FOLLOW state, they don't have time to go to WAIT_FULL_UP.
    Doesn't explain why C to F go to START_FLICKER output. Would expect output to overflow to LOWER_BRIGHTNESS.
    Question 4 is wrong, SET_DELAY is set for 9 to F, just missed by monitor.
      


                                  __________4___________________
                                  0   __1__     _____6_____    7
                                      2   3     5   _8_  _C_   
                                                    9 A  D E
                                                    B    F


    Need to set delay in order down the tree.
    It is the order that nodes are added to the tree, so makes sense to set delay as tree is built.


    What if:
      0. Lantern state becomes ROOT
      1. Lantern sets output to SEND | SIGNAL              (Maybe SIGNAL represents a state e.g. SEND | FULL_UP)
      2. All other lantern states set to RECEIVE
      3. In LanternCollection::update when output is SEND set input of all neighbours in state RECEIVE to RECEIVE | SIGNAL
      4. On RECEIVE | SIGNAL input, receiving lanterns go to state RELAY and set output to SET_DELAY. RECEIVE | SIGNAL stays in input (how?) or gets stored.*
      5. When delay reaches 0, 
      6.   follow SIGNAL instructions. e.g. change state to SIGNAL, or set referenceBrightness.
      7. set output to SEND | SIGNAL
      
      could even set input of ROOT to RECEIVE | SIGNAL on state 0 so that logic is same for all lanterns.
      
      * change Lantern* parent to uint8_t receiveBuffer


      TODO:
        create new outputs and inputs
        write StateTransition for new states





  , {     FLICKER_DOWN            , LONG_TOUCH                    , ROOT_FULL_DOWN            , SEND | FULL_DOWN              } 
  , {     FLICKER_UP              , LONG_TOUCH                    , ROOT_FULL_UP              , SEND | FULL_UP                } 

  , {     ROOT_FULL_DOWN          , LONG_TOUCH_FALLING_EDGE       , FULL_DOWN                 , LOWER_BRIGHTNESS | 8          } 
  , {     ROOT_FULL_DOWN          , DONT_CARE                     , ROOT_FULL_DOWN            , LOWER_BRIGHTNESS | 8          } 
    
  , {     ROOT_FLICKER_DOWN       , LONG_TOUCH_FALLING_EDGE       , ROOT_AUTO_DOWN            , SEND |   ???                  } 
  , {     ROOT_FLICKER_UP         , LONG_TOUCH_FALLING_EDGE       , ROOT_AUTO_UP              , SEND |   ???                  } 

  , {     RECEIVE                 , RECEIVE | FULL_DOWN           , RELAY_FULL_DOWN           , PEND | FULL_DOWN              } 
  , {     RECEIVE                 , RECEIVE | FULL_UP             , RELAY_FULL_UP             , PEND | FULL_DOWN              } 
  , {     RECEIVE                 , RECEIVE                       , RECEIVE                   , SET_DELAY | RANDOM_DELAY      } 

  , {     RELAY                   , AT_ZERO_DELAY                 , GO_IDLE                   , SEND                          }
  , {     RELAY                   , DONT_CARE                     , RELAY                     , REDUCE_DELAY                  }

//  , {     ROOT_AUTO_DOWN          , RISING_EDGE                   , ROOT_PAUSE_DOWN           , PULSE                         } 
//  , {     ROOT_AUTO_DOWN          , AT_ONE_BRIGHTNESS             , ROOT_PAUSE_DOWN           , SET_DELAY | 8                 } 
//  , {     ROOT_AUTO_DOWN          , DONT_CARE                     , ROOT_AUTO_DOWN            , LOWER_BRIGHTNESS | 1          } 
//
//  , {     ROOT_AUTO_UP            , RISING_EDGE                   , ROOT_PAUSE_UP             , PULSE                         } 
//  , {     ROOT_AUTO_UP            , AT_FULL_BRIGHTNESS            , ROOT_PAUSE_UP             , SET_DELAY | 8                 } 
//  , {     ROOT_AUTO_UP            , DONT_CARE                     , ROOT_AUTO_UP              , RAISE_BRIGHTNESS | 1          } 
//
//  , {     ROOT_PAUSE_DOWN         , RISING_EDGE                   , ROOT_AUTO_UP              , PULSE                         } 
//  , {     ROOT_PAUSE_DOWN         , FALLING_EDGE                  , ROOT_PAUSE_DOWN           , SET_DELAY | 8                 } 
//  , {     ROOT_PAUSE_DOWN         , AT_ZERO_DELAY                 , GO_IDLE                   , REDUCE_DELAY                  } 
//  , {     ROOT_PAUSE_DOWN         , DONT_CARE                     , ROOT_PAUSE_DOWN           , REDUCE_DELAY                  } 
//
//  , {     ROOT_PAUSE_UP           , RISING_EDGE                   , ROOT_AUTO_DOWN            , PULSE                         } 
//  , {     ROOT_PAUSE_UP           , FALLING_EDGE                  , ROOT_PAUSE_UP             , SET_DELAY | 8                 } 
//  , {     ROOT_PAUSE_UP           , AT_ZERO_DELAY                 , GO_IDLE                   , REDUCE_DELAY                  } 
//  , {     ROOT_PAUSE_UP           , DONT_CARE                     , ROOT_PAUSE_UP             , REDUCE_DELAY                  } 









  , {     WAIT                    , PARENT_IS_FULL_DOWN           , GO_FULL_DOWN              , SET_DELAY | RANDOM_DELAY      } 
  , {     WAIT                    , PARENT_IS_FULL_UP             , GO_FULL_UP                , SET_DELAY | RANDOM_DELAY      } 
  , {     WAIT                    , PARENT_IS_FOLLOW              , GO_FOLLOW                 , SET_DELAY | RANDOM_DELAY      } 
  , {     WAIT                    , DONT_CARE                     , WAIT                      , SET_DELAY | RANDOM_DELAY      } 

  , {     GO_FULL_DOWN            , AT_ZERO_DELAY                 , FULL_DOWN                 , LEAVE_TREE                    } 
  , {     GO_FULL_UP              , AT_ZERO_DELAY                 , FULL_UP                   , LEAVE_TREE                    } 
  , {     GO_FOLLOW               , AT_ZERO_DELAY                 , FOLLOW                    ,                               }

  , {     FOLLOW                  , PARENT_IS_IDLE                , GO_IDLE                   , LEAVE_TREE                    }
  , {     FOLLOW                  , DONT_CARE                     , FOLLOW                    , TRACK_PARENT                  }
