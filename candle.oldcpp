#include "Candle.h"
#include "Arduino.h"

#define LIGHT_SIGNAL 1
#define DARK_SIGNAL 0
#define SHORT_PRESS 0b10
#define LONG_PRESS 0b11
#define UNLIT_STATE 0
#define LIGHTING_STATE 1
#define LIT_STATE 2
#define GOING_OUT_STATE 3


void receiveButtonSignal(uint32_t input) {
  for ( uint8_t i = 0; i < 0x10; i++ ) {
    if ( input >> 0x1F ) { 
      candle[i].isBeacon = true;
    }
    input <<= 1;
    if ( input >> 0x1F ) { candle[i].updateState(); }
    input <<= 1;
  }
}





Candle::Candle() 
{
  newCandle();
}


void Candle::updateState() {
  if ( wax == 0 ) { newCandle(); }
  switch (state) {
    case LIGHTING_STATE:
      if ( isBeacon ) {
        sendBeaconSignal(LIGHT_SIGNAL);
        isBeacon = false;
      }
      break;

    case GOING_OUT_STATE:
      if ( isBeacon ) {
        sendBeaconSignal(DARK_SIGNAL);
        isBeacon = false;
      }
      break;
  }
  state++;
  state = state % 4;
}


void Candle::updateGlow() {
  switch (state) {
    case LIGHTING_STATE:
      glowUp();
      if (glow == 255) {
        updateState();
      }
      break;

    case GOING_OUT_STATE:
      glowDown();
      if (glow == 0) {
        updateState();
      }
      break;
  }
}


void Candle::setGlow(uint8_t value) {
  glow = value;
}


uint8_t Candle::getGlow() {
  return glow;
}


void Candle::glowUp() {
  if (glow < 255) {
    glow += random(256 - glow) % 10;
  }
}


void Candle::glowDown() {
  if (glow > 0) {
    glow -= random(1 + glow) % 10;
  }
}


void Candle::setNeighbourCandlesArray(Candle neighbours[]) {
  neighbourCandlesArray = neighbours;
}


void Candle::sendBeaconSignal(bool outgoingSignal) {
  for (uint8_t i = 0; i < sizeof(neighbourCandlesArray) / sizeof(neighbourCandlesArray[0]); i++) {
    neighbourCandlesArray[i].receiveBeaconSignal(outgoingSignal);
  }
}


void Candle::receiveBeaconSignal(bool incomingSignal) {
  isBeacon = true;
  if (state == UNLIT_STATE and incomingSignal == LIGHT_SIGNAL) {
    updateState();
  }
  else if (state == LIT_STATE and incomingSignal == DARK_SIGNAL) {
    updateState();
  }
  else {
    sendBeaconSignal(incomingSignal);
  }
}


void Candle::newCandle() {
  glow = 0;
  state = UNLIT_STATE;
  wax = random(-30, 30) + 4*60;  // minutes
}

  
void Candle::setWax(int value) {
  wax = value;
}


int Candle::getWax() {
  return wax;
}


void Candle::burnWax() {
  if (wax > 0 and state == LIT_STATE) {
    wax--;
  }
}


void Candle::burnOut() {
  glow = 0;
  state = UNLIT_STATE;
}
